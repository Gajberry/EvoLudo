TODO:
1) rethink coloring in continuous strategies. the coloring of 'coop' and 'defect' scores is upset. what about strategyLength>1?
2) accumulating of payoffs poses some problems for tracking population scores - min payoff should still work but max payoff unpredictable...
   maybe just plotting the averages...

060422:
- random0n() now works with float precision instead of double by default - is twice a s fast.
- DynamicTBT finally working for dynamic regular graphs, preserving regularity

060223:
IMPORTANT:
- mixedScores() is based on infinite population sizes - returns wrong results in finite populations! requires hyperbolic distributions.
- the renaming of java classes affects the applet embedding in the html pages!
version 3.7:
- command line option changes finished
- CXPopulation: init() removed and, similar to discrete strategies, replaced by setTraitNames()
- dito: getStrategyLength() renamed to getTraitCount()
- all cost/benefit function stuff moved to CXPopulation.
- starting to rename XXXPop.java to XXX.java and XXX.java to XXXLab.java
- CLabour.java and CSD.java cleaned accordingly.
- payoff-function-parser (http://www.singularsys.com/jep) implemented - is about 100x slower but usable

060125:
version 3.7pre:
- command line options: when running as an application, the virtuallabs now accept command line options.
- parsing and information on options is now all managed by Population and subclasses.
- transition not yet complete but will affect and greatly simplify the simulations.
- eventually this should also include methods to dump the parameters into a file.

051216:
version 3.6:
- baseline fitness revisited. baseline fitness assigned only upon reset (in 3.5.5 baseline fitness was added to every interaction) - this only affects accumulated payoffs.
- parseVector() utility function added to PopulationParser.java. parseInitFrequencies() adjusted accordingly.
- removeScoreAt() and updateScoreAt() in DPopulation.java improved - now call super.

051123:
version 3.5.5:
- selection pressure parameter added - extensive changes. in particular, playerBaselineFitness now only used in Population.java and few other places but no longer used in labs (e.g. getMinScore(), getMaxScore() and getMonoScore()). Population.java takes care of the baseline fitness and the selection pressure - labs only return the payoffs from the game.

051110:
version 3.5.2:
- checkParams() and generateGeometry() return boolean to indicate whether parameter adjustments have been made.
- logWarning() logs detailed parameter adjustments to console, status line just shows a general warning.
- interactions with all members in the population for well-mixed populations should work now for DPopulation & co.
- continuous labs no longer allow the setting of interacting with all members in well-mixed populations.

051019:
version 3.5pre: changes in engine:
- INTERACTION_ALL for well-mixed populations with distcrete strategies finally added. 
- ATTENTION: this requires new mixedScores() routine in all labs!
- new method checkParams() that is called by reset() and paramsDidChange() to check parameters and set associated variables.
- updateScores() optimized for discrete strategies in well-mixed populations

051011:
version 3.42: changes in engine:
- new structure scale-free added with deterministic wiring (allows to specify exponent, connectivity and population size)
- rewireDirected() rewritten (now based on swapping links between random nodes - might be a bit slower because it checks connectivity of graph but procedure is robust)

050928:
- new lab on games in demes
version 3.33: changes in engine:
- new population structures: complete graphs and wheels.
- moran processes now also implement mutations - updatePlayerMoran() in Population.java.
- 'silent' option to include focal player in competition (imitation interpretation of death-process) - new flag deathBirthIncludeSelf for drawFitNeighborAt() in Population.java.

050714:
- hackish changes in CSD.java and CSDPop.java to carry out some simulations of branching in the tragedy of the commons. must be removed again. affects also timeCSD.java and scanCSD.java.

050624:
- image saving capability added. when starting as an application, control-click will save the current view in MultiView in png-format. the file prefix can be specified in the *Lab.java class by overriding the getImagePrefix() method. default is "image". the prefix is followed by the generation time. if the file exists, "-n" is appended where n is the smallest integer number corresponding to a new filename.
- important: this ability is disabled for applets because it would result in a security violation.
- MultiView.java: few new lines in mousePressedProcessed(). needs to find out whether applet or application - instance of GenericLab stored in new variable.
- GenericLab.java: new methods isApplet() and getImagePrefix() the latter may by overriden to return more specific prefix for the filenames.

050609:
- new lab to study dynamical networks DynamicTBT.
- new variable introduced: PopGeometry.isDynamic to indicate whether structure changes over time.
- some changes to MVGrid.java to deal with changeing structures.

050516:
- two new labs added to study division of labour: Labour and CLabour.
- MVGridHist2D.java y-axis label removed - compatibility issue with Microsoft java engine.
- scanTBTFix improved

050412:
version 3.3: changes in engine
- MoranPop.java: optimization - all game interactions removed
- XPopulation.java: update methods modified to allow neutral evolution (affects updatePlayerBestReply(), updatePlayerBest(), updateProportionalAbs(), updateReplicatorPlus(), updateReplicatorHalf() and updateThermal()).
- PopulationGeometry.java: fully connected graph added (affects PopulationParser.java and PopulationLab.java).
- DPopulation.java: optimization for Moran processes - restricts updates to links with differing strategies at ends.
- moran process renamed: reproduction->birthdeath and survival->deathbirth.

050304:
version 3.26a: minor interface changes
- tooltips disappeared when mouse entered tip - fixed.
- for star structure, upper half of node 1 toggled hub (node 0) - fixed.
- mouse handling cleaned, including new class DPopulationLab.java to relieve initialization routines triggered by MVSimplex3 and MVSimplex4Wk.

050304:
version 3.26: engine changes
- bug fixed in drawFitNeighborAt(). moran survival update did not work for structured populations (well-mixed was ok).

050302:
version 3.25: IMPORTANT engine changes
- updateThermal() no longer rescales payoffs with maximum payoff difference. this was done to preserve some invariance upon rscaling the payoffs but this is undesirable and obscure in many circumstances, i.e. thermal update remains invariant under linear payoff shifts/translations (because only the payoff differences enter) but it is no longer invariant with respect to some scaling factors a. the changes arising from scaling can be absorbed in the temperature T by setting T'=a*T.
- PopGeometry.interReproSame was ignored by initGeometry()! this affected all random structures since the separation of the interaction and reproduction neighborhoods.
- virtuallabs in vienna updated.

050302:
version 3.24: engine changes
- all update rules extended to cover accumulated payoffs - was lacking in 3.23. 
- all methods using maxScore and minScore must be careful about changes arising from accumulated payoffs

050301:
version 3.23: interface/parameter changes:
- removed pop-up list for selection of boundary conditions. replace with checkbox for fixed boundaries
- added checkbox to choose between averaging and accumulating scores
- added checkbox to choose between always reseting scores and only upon switching of strategies
- accumulating versus averaging payoffs implemented. affects only *ScoresAt()-routines and resetScores() in Population.java and DPopulation.java
NOTE: the timing of reseting scores requires delicate disentangling of population updates and player updates!

050228:
version 3.22: fixed a problem in initGeometryRandomRegularGraph(): starting with N-loop is too restrictive!

050221:
numerous changes...
- ChHTooltip added such that information on nodes is displayed while mouse is hovering over the site. affects MultiView* and MV* classes
- hardcoding of strategy coloring of payoffs for mutual cooperation and mutual defection removed
- getCoopScore() and getDefectScore() replaced by getMonoScore(int type)

050211:
- baseline fitness introduced (should mainly prevent negative payoffs in moran type updates)
- bug fixes in MVGrid* - display was not cleared in the right places (changes uploaded to vienna)

050210:
- visitors to the virtuallabs in vienna between may 2002 and the end of december 2004: 16'632 (weblog).
- new version of virtuallabs uploaded to vienna
- all web pages standards compliant (html 4.01 transitional, css2)

050125:
PopulationGeometry.java, Population.java:
- interaction pattern INTERACTION_ALL with a group size larger than two but less than the number of neighbors requires a special internal arrangement of the neighbors.
- special initialization for the moore neighborhood reintroduced into PopulationGeometry.java.
- check added to Population.java that neighborhood size and interaction pattern remain compatible.
PopulationLab.java:
- appending an x or X to the population size field sets the size of the lattice side (squares the number)
- by default the reproduction network is now the same as the interaction network. set applet parameter GEOMETRY_INTERACTION to induce different networks.
PublicGoods tutorial extended/improved - first steps towards more flexible CSS representation.

050122:
- more bugfixes (MVGrid*, MVMean*): clear now behaves the same as reset except that the structure is not reinitialized
- new static class PopulationGeometry.java that takes care of the population structure stuff

050121:
- bugfixes (MVGrid*)
- changes/fixes on web pages
- 2x2 tutorial finished

050111:
humongouse changes...
- separation of interaction and reproduction networks
- MVGrid* ignores reproduction network at this point - unclear how to treat this...
Population.java:
- network parameters obsolete - wrapped in structures PopGeometry and ParamGeometry
- all methods accept network params as argument
- arbitrary neighborhoods on square lattices (von Neumann, Moore, 5x5, 7x7...)

041209:
DriftGoods* rewritten:
- renamed to Discount*
- payoff calculation corrected. note: benefits denote total benefits produced by one player!
Population.java:
- initGeometry(): determine min, max and average connectivities of incoming and outgoing links.
MVHistogramDPayoff.java:
- changes in the payoffs were ignored which caused troubles - fixed.

041123:
- sources and sinks caused troubles in the moran process - fixed.
- new lab Moran added for classical (frequency independent) moran process.

041122:
- bestReply() in OPublicGoods.java fixed (sign error).
- pairwise games implemented reset() to make sure the interaction size was set to 1. better place is to override setIGroupSize() of Population.java because then the parameters panel always reset to 1 too.
- SimplexS3.java improved - strategy names are now printed in the corners.

041110:
improvements for mutiple traits in continuous games
- 2D histogram view added (MVGridHist2D.java)
CXPopulation.java:
- adds minimum trait value
- min, max, initial mean and sdev and sdev of mutations can be specified per trait
- all new settings on misc panel of parameters
GenericLab.java:
- parseVector() added - was private in RockScissorsPaper.java, now public
bug fix in Population.java
- sampling of random neighbors did not work... now fixed!

041012:
numerous bug fixes...
MVGrid*: 
- default is to display ring of nodes with links drawn (no links for mean-field)
- wrong coloring of links in networks with mixed directed and undirected links. fixed.
StatusLabel.java:
- now calls getStatusMsg() in Population.java providing an opportunity to display warnings or errors by putting a string into statusMsg.
*Population:
- directed links implemented. 
- payoff routines are now aware of whether links point forward or backward (affects all labs...).
- if graph is undirected, nothing changes.
- directed/undirected adding/rewiring of random links is rewritten/implemented. new parameters added.
PopulationLab.java:
- interactions treated in the same way as references with options 'default' or 'count'.
and lots more...

041009:
MVGridDStrat.java:
- mousePressedProcessed() restructured (GenericLab.java: mouseHitMember() removed).
- processing of petal structures added.

041007:
Population.java:
- more population structures added (GEOMETRY_RANDOM_GRAPH, GEOMETRY_RANDOM_REGULAR_GRAPH, GEOMETRY_RANDOM_GRAPH_DIRECTED, GEOMETRY_LINEAR_ASYMMETRIC, GEOMETRY_PETALS)
- network initializations fixed (GEOMETRY_RANDOM_GRAPH, GEOMETRY_RANDOM_REGULAR_GRAPH, GEOMETRY_RANDOM_GRAPH_DIRECTED)
- moran process with survival scenario added.
- for reasons of consistency, updatePlayerBestReply() is now based on reference sample instead of entire neighborhood.
DPopulation.java:
- updatePlayerBestReply() changed to decide based on reference sample.
MVGrid.java:
- display new population structures
- check if links directed (color outgoing part dark blue and incoming part dark red; color undirected links black).
- GEOMETRY_PETALS still missing.
PopulationLab.java:
- added paramters for GEOMETRY_PETALS (partial only).
Analyze.java:
- avgShortestPath() choked if population contains sources or sinks. fixed.
MVInfo.java:
- info now mentiones if populations contains sources or sinks.
Directed graphs require a complete rewrite of the payoff calculation - bail out for now...

041006:
bug fixes:
MVGrid* - viewWillGetActive(), engineChanged(), setActive()
- linear populations structures were only updated when view was active. fixed.
- linear population structures would advance one step when activated. fixed.
Population.java:
- for synchronous updates the scores should be calculated after the strategy update - otherwise strategy and payoff graphs are out of sync. this was obvious in the histogram when loners had a payoff different from sigma... fixed.
MVHistogram* - fillBins()
- remove variable 'norm' - was unappropriate, 'zoom' takes care of that. fixed.

040818:
humongous changes...
- MVInfo.java: new info panel that provides information about the current population structure (including size, min/max connectivity, avg. minimal path length, clustering coefficient, degree distribution...)
- Population.java:
1) new structures from moran project added (including stars and scale-free networks)
2) approach to small world rewritten - rewireUndirected() and rewireDirected() added
3) neighbors[][] replaced by inlinks[][] and outlinks[][] in preparation for more general directed networks
4) new update rules: moran process and update based on accumulated payoffs (used by santos & pacheco)
5) parameter fracNewJoints replaced by pRandUndirLinks and pRandDirLinks - not yet implemented (although pRandUndirLinks is used for scale-free networks)
6) boundary conditions added (new parameter geometryBoundary) - option to select fixed boundaries for linear and square lattices (triangular and hexagonal missing)
7) parameter nNeighbors replaced by geometryConnectivity
- Analyze.java updated with moran project
- MVGrid.java: 
1) draws stars and scale-free networks (the latter include the connections between the nodes)
2) draws linear networks with y-axis as time
- MVGridDStrat.java now also allows to configure strategies on linear lattices, stars and scale-free networks
- bug fixed, TwoByTwo.java and MVHistogramDStrat.java did not interact well (C and D exchanged)
- and probably quite a few more minor changes...

040722:
best-reply updated:
- best-reply is no longer a valid update rule for continuous strategies - CXPopulation.java throws an error and CXPopulationLab does not list it as a valid update rule.
- DPopulation.java: updatePlayerBestReply() updated such that in mean-field population the best-reply is based on the composition of the entire population but in structured populations only the player's neighborhood is taken into account.
- bestReply(int, int[], int) instead of bestReply(int, int[]) - the sample size is no longer assumed to be the entire population and thus the sample size mussed be passed as an additional parameter.
- all game implementations updated: descendants of DPopulation use new bestReply() and descendants of CXPopulation have bestReply() removed.

040630:
- timeCSD.java updated to comply with changes introduced in CSDPop (new separate cost and benefit functions).
- scanCSD.java created to produce phase-plane-diagrams.

040623:
modifications in MVHistogram*:
- automatic zooming now works much nicer, no more 'blinking'.
- engineReset() must be called by subclasses to reset zoom.
- code cleaning.
modifications in Population:
- updateReplicatorHalf(): original meaning of switchPref restored (was a bit of a hack...)
- dito: noise parameter now affects the slope of the linear update rule - 1 neutral, 0 step and >>1 constant (0.5).
- speedup: new private variables minScore and maxScore - greatly reduces the number of calls to getMxxScore(). now they are called in updateScores() which is much better but not yet perfect...
modifications in CSDPop:
- updateScores(): call to super was in wrong place!
bugfix:
- mutation rates <0.001 were set to zero...

040610:
- switchPref added to updateProportionalAbs() - reduces the probability to keep strategy.
- switchPref modified in updateReplicatorHalf() - it now affects the slope (1 is step function).

040609:
- CSD extended: new cost/benefit functions added and code cleaned (proper constants introduced, description etc.).
- GenericLab.java: checkParam() now accepts a default value.
- Population.java: 'random' initial seed for MersenneTwister.

040526:
- bug fix: nStrategies must be set by subclasses of DPopulation upon initialization.
- cost and benefit functions in CSD.java modified and extended.

040522:
modifications in MVHistogram*:
- scale of histogram automatically adjusted - if this feature is kept it should be refined to avoid 'blinking'... currently this feature is only available in MVHistogramCStrat - could be extended to payoffs.
- bug fix: histogram is now displayed on startup.

040520:
new update rule for players added:
- updateReplicatorHalf() introduced (another individual based interpretation of the replicator dynamics with w(x->y)=(Py-Px)/alpha+1/2 where alpha is a suitable normalization constant. for the simulations the smallest possible alpha was chosen with alpha=Pmax-Pmin).
- updateProportionalRel() renamed to updateReplicatorPlus() hinting at the update rule w(x->y)=(Py-Px)+/alpha.
- error in updateThermal() for kappa=0 fixed

040309:
extensions of interface:
- histogram now also available for payoffs. MVHistogram abstract super class and MVHistogramCStrat.java, MVHistogramDPayoff.java, MVHistogramCPayoff.java added.
- MVHistogramDPayoff.java: histogram is colored according to strategy
- CSDPop.java: for non-linear payoff functions it is a non-trivial task to determine the maximum and minimum scores as well as the scores for mutual cooperation and mutual defection. brute force maximizer/minimizer added - requires reasonably smooth cost/benefit functions.

040225:
Numerous changes triggered by implementation of Ultimatum game.
- new game added: Ultimatum.java and UltimatumPop.java
- CPopulationLab.java renamed to CXPopulationLab.java
- CXPopulation.java rewritten. strategies are now stored sequentially in an array of one-dimension instead of two. if the strategies have length len, then the first component of the strategy of player idx is accessed as strategies[idx*len].
- MVHistogram.java now supports multiple distributions.
- MVMean.java and MVMeanCStrat.java now support multiple traits.
- MVGridCStrat.java now supports two traits (first rangeing from black to green and second from black to red, i.e. if both are high the cell is yellow).
- bug fixes:
    - font issues resolved in CounterLabel.java, StatusLabel.java and MVGrid.java.
    - CounterLabel.java, StatusLabel.java are again black on white also in 1.4.2...
    - layout in GenericLab.java slightly changed such that status line gets more space.
    - numerous outdated comments and unused code trashed.
    - MVHistogram.java: end of range marked with tick, histogram centered and level-line-width adjusted.
    - MVGrid.java: 'Graphical representation unavailable!' now big, bold and centered.

040127:
- MVSimplex4Wk.java: engineReset(), parametersChanged() restored - screen must be cleared with 'clear' button.
- PunishmentPop.java: groupScores() bug fixed with reputation.

040126:
- GenericLab.java: revertParams() moved from applyParams() to paramsDidChange() - parameter panel should now reflect necessary adjustements too parameters.
- MVSimplex4Wk.java: engineReset() now clears screen but parametersChanged() does not.
- parseInteger() and parseDouble() return 0 if called with a null argument.
- RewardPop.java: groupScores() bug fixed with reputation.

040121:
- MVHistogram did not plot highest bar due to a rounding issue while populating the bins - fixed.
- new parameter traitMaximum added to CPopulation - increases flexibility and spares hassle of rescaling parameters.

040120:
bug fixed in nextBinomial().

040106:
CSD added - continuous snowdrift game with the intriguing option to study evolutionary branching in a gema theoretical context.
- minor fix of MVHistogram that crashed the applet when starting up with the histogram view active.

031107:
- major modifications in the population update. setGameScoreAt() was flawed - it worked properly only for pairwise interactions. affected routines:
1) setGameScoreAt() deleted from DPopulation.java, CXPopulation.java and CPopulation.java.
2) updatePlayerAsyncReplicateAt() in Population.java modified. this implements a new scheme to determine and adjust the payoffs in asynchronous updates.
3) new method adjustGameScoresAt() - in accordance with its name it adjusts the payoffs after a strategy change. such adjustments only work if individuals interact with all neighbors (i.e. if INTERACTION_ALL and RANDOM_PARTNERS_NONE). otherwise payoffs determined 'directly' - see updatePlayerAsyncReplicateAt().
4) adjustGameScoresAt() required several new methods in order to subtract former payoffs from the scores. this includes removeScoreAt() (2 methods) yalpPairScore() and yalpGroupScore() in Population.java, CXPopulation.java, CPopulation.java and DPopulation.java, respectively. together they are essentially reversing playGameAt().

- minor things:
1) call to reset() moved from applyParams to the more appropriate place paramsDidChange() in GenericLab.java.
2) getMeanScores() extended such that in DPopulation.java extinct strategies may return scores below minScore. MVMeanPayoff.java and MVMean.java are aware of this and no longer draw lines for negative entries.
3) updatePlayerAt(int) in Population.java cleaned. updatePlayerAt(int, int[], int) now deals with PLAYER_UPDATE_BEST_REPLY.
4) mouseHitMember() rewritten to use adjustGameScoresAt() or updateScores() as appropriate.

031105:
- best update and imitate proportional are invariant to translations of the payoffs as well as multiplying them by a common factor. 'thermal' update is also invariant to translations but not to multiplication with a common factor. this is undesirable because it leads to different amount of noise in (n-1) PD interactions than in a single PGG interaction with n people. to avoid this, the payoff-differences are rescaled relative to the maximum payoff difference. this makes 'thermal' update invariant to multiplications too. this affects only updateThermal() in Population.java.

031028:
- for continuous strategies, mutations outside [0,1] were truncated to 0 and 1 respectively. this results in a bias  towards the extremes. now mutants are drawn until a viable strategy is found. this leads to a more natural draining of the extremes. affects mutateStrategyAt() in CXPopulation.java and CPopulation.java.

031006:
- mutations occurred only after strategy actually changed. this is wrong. mutations must occur whenever a player is updated. affected routines:
1) updatePlayerAt(int) and updatePlayerAt(int, int[], int) in Population.java. 
2) mutations removed from updateFromModelAt(int, int), updatePlayerBestReply(int) in DPopulation.java, CXPopulation.java and CPopulation.java.
3) new routine mutateStrategyAt(int)

- switchPref affected only updateProportionalRel() but makes equal sense for updateThermal(). appropriate changes added. check whether anything happens moved to an earlier point in both routines.

- in simulations, switchpref could be only set for imitation/replication. the default was 1, i.e. switch whenever at least one better strategy is around. default is now zero - no bias towards switching and added a new option -P that takes care of this.
