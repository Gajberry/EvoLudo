<!-- ant build file for core classes of VirtualLabs -->

<project name="core" default="all" basedir="." >

	<property name="src" value="src"/>
	<property name="resources" value="resources"/>
	<property name="build" value="build"/>
	<property name="build.classes" value="${build}/classes"/>

	<!-- default compiler args (optimize and maximize compatibility) -->
	<property name="compilerargs" value="-nowarn"/>
	<property name="source" value="1.3"/>
	<property name="target" value="1.2"/>
	<property name="debug" value="off"/>
	<property name="optimize" value="on"/>
	<property name="listfiles" value="no"/>

	<!-- build discrete and continuous applets -->
	<target name="dapplet" depends="dinterface,applet,strip">
		<echo message="Compiling ${applet} with '${compilerargs}', optimize: ${optimize}, debug: ${debug}"/>
	</target>

	<target name="capplet" depends="cinterface,applet,strip">
		<echo message="Compiling ${applet} with '${compilerargs}', optimize: ${optimize}, debug: ${debug}"/>
	</target>

	<target name="dsims" depends="dcore,sim">
		<echo message="Compiling ${sim} with '${compilerargs}', optimize: ${optimize}, debug: ${debug}"/>
	</target>

	<target name="csims" depends="ccore,sim">
		<echo message="Compiling ${sim} with '${compilerargs}', optimize: ${optimize}, debug: ${debug}"/>
	</target>

	<target name="applet">
		<property name="main" value="${applet}"/>
		<javac srcdir="${src}" 
			   destdir="${build.classes}" 
			   source="${source}" 
			   target="${target}" 
			   listfiles="${listfiles}" 
			   debug="${debug}" 
			   optimize="${optimize}" >
			<include name="chh/virtuallabs/interface/labs/${main}Lab.java"/>
			<include name="chh/virtuallabs/core/labs/${main}.java"/>
			<compilerarg value="${compilerargs}"/>
		</javac>

		<jar destfile="${build.applets}/${applet}.jar" basedir="${build.classes}" >
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Main-Class" value="chh.virtuallabs.${main}Lab"/>
			</manifest>
		</jar>
	</target>

	<target name="sim">
		<property name="game" value="${core}"/>
		<property name="main" value="${sim}"/>
		<javac srcdir="${src}" 
			   destdir="${build.classes}" 
			   source="${source}" 
			   target="${target}" 
			   listfiles="${listfiles}" 
			   debug="${debug}" 
			   optimize="${optimize}" >
			<include name="chh/virtuallabs/core/labs/${game}.java"/>
			<include name="chh/virtuallabs/simulation/${main}.java"/>
			<compilerarg value="${compilerargs}"/>
		</javac>

		<jar destfile="${build.simulations}/${main}.jar" basedir="${build.classes}" >
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Main-Class" value="chh.virtuallabs.${main}"/>
			</manifest>
		</jar>
	</target>

   <!-- build discrete interface -->
  <target name="dinterface" depends="dcore,svg">
    <javac srcdir="${src}" 
		   destdir="${build.classes}" 
		   source="${source}" 
		   target="${target}" 
		   listfiles="${listfiles}" 
		   debug="${debug}" 
		   optimize="${optimize}" >
        <include name="chh/virtuallabs/interface/GenericLab.java"/>
        <include name="chh/virtuallabs/interface/PopulationLab.java"/>
        <include name="chh/virtuallabs/interface/DPopulationLab.java"/>
        <include name="chh/virtuallabs/interface/ParamPanel.java"/>
        <include name="chh/virtuallabs/interface/MultiView.java"/>
        <include name="chh/virtuallabs/interface/MVLog.java"/>
        <include name="chh/virtuallabs/interface/MVAbstract.java"/>
        <include name="chh/virtuallabs/interface/MVDMean.java"/>
        <include name="chh/virtuallabs/interface/MVDS3.java"/>
        <include name="chh/virtuallabs/interface/MVDS4Manifold.java"/>
        <include name="chh/virtuallabs/interface/MVDPhase2D.java"/>
        <include name="chh/virtuallabs/interface/MVPop.java"/>
		<include name="chh/virtuallabs/interface/MVPop3D.java"/>
        <include name="chh/virtuallabs/interface/MVFitness.java"/>
        <include name="chh/virtuallabs/interface/MVFitHistogram.java"/>
        <include name="chh/graphics/AbstractGraph.java"/>
        <include name="chh/graphics/ColorModel.java"/>
        <include name="chh/graphics/LineGraph.java"/>
        <include name="chh/graphics/StateGraphListener.java"/>
        <include name="chh/graphics/StateData.java"/>
		<include name="chh/graphics/S3Graph.java"/>
        <include name="chh/graphics/ParaGraph.java"/>
        <include name="chh/graphics/PopGraph.java"/>
		<include name="chh/graphics/PopGraph3D.java"/>
        <include name="chh/graphics/PopData.java"/>
        <include name="chh/graphics/PopFrameLayer.java"/>
        <include name="chh/graphics/PopListener.java"/>
        <include name="chh/graphics/HistoGraphListener.java"/>
        <include name="chh/graphics/FrameLayer.java"/>
        <include name="chh/graphics/S3FrameLayer.java"/>
        <include name="chh/graphics/GlassLayer.java"/>
        <include name="chh/graphics/GraphAxis.java"/>
        <include name="chh/graphics/GraphLabel.java"/>
        <include name="chh/graphics/GraphListener.java"/>
		<compilerarg value="${compilerargs}"/>
    </javac>
    <copy todir="${build.classes}/${resources}">
        <fileset dir="${resources}" includes="*"/>
    </copy>
  </target>

   <!-- build continuous interface -->
  <target name="cinterface" depends="ccore,svg">
    <javac srcdir="${src}" 
		   destdir="${build.classes}" 
		   source="${source}" 
		   target="${target}" 
		   listfiles="${listfiles}" 
		   debug="${debug}" 
		   optimize="${optimize}" >
        <include name="chh/virtuallabs/interface/GenericLab.java"/>
        <include name="chh/virtuallabs/interface/PopulationLab.java"/>
        <include name="chh/virtuallabs/interface/CXPopulationLab.java"/>
        <include name="chh/virtuallabs/interface/ParamPanel.java"/>
        <include name="chh/virtuallabs/interface/MultiView.java"/>
        <include name="chh/virtuallabs/interface/MVLog.java"/>
        <include name="chh/virtuallabs/interface/MVAbstract.java"/>
        <include name="chh/virtuallabs/interface/MVPop.java"/>
        <include name="chh/virtuallabs/interface/MVPop3D.java"/>
        <include name="chh/virtuallabs/interface/MVCMean.java"/>
        <include name="chh/virtuallabs/interface/MVCTraitHistogram.java"/>
        <include name="chh/virtuallabs/interface/MVCDistr.java"/>
        <include name="chh/virtuallabs/interface/MVC2Distr.java"/>
        <include name="chh/virtuallabs/interface/MVFitness.java"/>
        <include name="chh/virtuallabs/interface/MVFitHistogram.java"/>
        <include name="chh/graphics/AbstractGraph.java"/>
        <include name="chh/graphics/ColorModel.java"/>
        <include name="chh/graphics/LineGraph.java"/>
        <include name="chh/graphics/StateGraphListener.java"/>
        <include name="chh/graphics/StateData.java"/>
        <include name="chh/graphics/PopGraph.java"/>
        <include name="chh/graphics/PopData.java"/>
        <include name="chh/graphics/PopFrameLayer.java"/>
        <include name="chh/graphics/PopListener.java"/>
        <include name="chh/graphics/HistoGraphListener.java"/>
        <include name="chh/graphics/FrameLayer.java"/>
        <include name="chh/graphics/GlassLayer.java"/>
        <include name="chh/graphics/GraphAxis.java"/>
        <include name="chh/graphics/GraphLabel.java"/>
        <include name="chh/graphics/GraphListener.java"/>
		<compilerarg value="${compilerargs}"/>
    </javac>
    <copy todir="${build.classes}/${resources}">
        <fileset dir="${resources}" includes="*"/>
    </copy>
  </target>

  <!-- scalable vector graphics output -->
  <target name="svg" depends="freehep,shadowsvg" />

  <target name="freehep" unless="nosvg">
	<unjar dest="${build.classes}">
		<fileset dir="lib">
			<include name="freehep-graphics2d-2.1.1.jar"/>
			<include name="freehep-util-2.0.2.jar"/>
			<!-- xml is required for svg -->
			<include name="freehep-xml-2.1.1.jar"/>
			<include name="freehep-io-2.0.2.jar"/>
			<include name="freehep-graphicsio-2.1.1.jar"/>
			<!-- we could add further file formats here -->
			<include name="freehep-graphicsio-pdf-2.1.1.jar"/>
			<include name="freehep-graphicsio-svg-2.1.1.jar"/>
			<include name="freehep-graphicsio-ps-2.1.1.jar"/>
		</fileset>
	</unjar>
  </target>

  <target name="shadowsvg" if="nosvg">
    <javac srcdir="${src}" 
		   destdir="${build.classes}" 
		   source="${source}" 
		   target="${target}" 
		   listfiles="${listfiles}" 
		   debug="${debug}" 
		   optimize="${optimize}" >
        <include name="chh/shadow/svg/VectorGraphics.java"/>
        <include name="chh/shadow/svg/PSGraphics2D.java"/>
        <include name="chh/shadow/svg/PDFGraphics2D.java"/>
        <include name="chh/shadow/svg/SVGGraphics2D.java"/>
        <include name="chh/shadow/svg/ShadowPackageOrgFreehepGraphics2d.java"/>
        <include name="chh/shadow/svg/ShadowPackageOrgFreehepGraphicsioPs.java"/>
        <include name="chh/shadow/svg/ShadowPackageOrgFreehepGraphicsioPdf.java"/>
        <include name="chh/shadow/svg/ShadowPackageOrgFreehepGraphicsioSvg.java"/>
		<compilerarg value="${compilerargs}"/>
    </javac>
  </target>

  <!-- function parser for continuous games -->
  <target name="parser" depends="jep,shadowjep" />

  <target name="jep" unless="noparser">
	<unjar dest="${build.classes}">
		<fileset dir="lib">
			<include name="jep-2.3.1.jar"/>
		</fileset>
	</unjar>
  </target>

  <target name="shadowjep" if="noparser">
    <javac srcdir="${src}" 
		   destdir="${build.classes}" 
		   source="${source}" 
		   target="${target}" 
		   listfiles="${listfiles}" 
		   debug="${debug}" 
		   optimize="${optimize}" >
        <include name="chh/shadow/jep/JEP.java"/>
        <include name="chh/shadow/jep/ShadowPackageOrgNfunkJep.java"/>
		<compilerarg value="${compilerargs}"/>
    </javac>
  </target>

   <!-- build discrete engine -->
  <target name="dcore" depends="svn">
    <javac srcdir="${src}" 
		   destdir="${build.classes}" 
		   source="${source}" 
		   target="${target}" 
		   listfiles="${listfiles}" 
		   debug="${debug}" 
		   optimize="${optimize}" >
<!--        <include name="chh/virtuallabs/core/util/Analyze.java"/> -->
        <include name="chh/virtuallabs/core/Population.java"/>
        <include name="chh/virtuallabs/core/DPopulation.java"/>
        <include name="chh/virtuallabs/core/PopulationGeometry.java"/>
        <include name="chh/virtuallabs/core/PopulationParser.java"/>
        <include name="chh/virtuallabs/core/EngineListener.java"/>
        <include name="chh/virtuallabs/core/util/RungeKutta.java"/>
        <include name="chh/virtuallabs/core/util/ReactionDiffusion.java"/>
        <include name="chh/graphics/ColorModel.java"/>
        <include name="chh/util/ChHMath.java"/>
        <include name="chh/util/ChHFormatter.java"/>
        <include name="chh/util/PlistParserer.java"/>
        <include name="chh/util/XMLCoder.java"/>
        <include name="chh/util/CLOParser.java"/>
        <include name="chh/util/CLOProvider.java"/>
        <include name="ec/util/MersenneTwister.java"/>
		<compilerarg value="${compilerargs}"/>
    </javac>
  </target>

   <!-- build continuous engine -->
  <target name="ccore" depends="svn,parser">
    <javac srcdir="${src}" 
		   destdir="${build.classes}" 
		   source="${source}" 
		   target="${target}" 
		   listfiles="${listfiles}" 
		   debug="${debug}" 
		   optimize="${optimize}" >
<!--        <include name="chh/virtuallabs/core/util/Analyze.java"/> -->
        <include name="chh/virtuallabs/core/Population.java"/>
        <include name="chh/virtuallabs/core/CXPopulation.java"/>
        <include name="chh/virtuallabs/core/CPopulation.java"/>
        <include name="chh/virtuallabs/core/PopulationGeometry.java"/>
        <include name="chh/virtuallabs/core/PopulationParser.java"/>
        <include name="chh/virtuallabs/core/EngineListener.java"/>
        <include name="chh/graphics/ColorModel.java"/>
        <include name="chh/util/ChHMath.java"/>
        <include name="chh/util/ChHFormatter.java"/>
        <include name="chh/util/PlistParserer.java"/>
        <include name="chh/util/XMLCoder.java"/>
        <include name="chh/util/CLOParser.java"/>
        <include name="chh/util/CLOProvider.java"/>
        <include name="ec/util/MersenneTwister.java"/>
		<compilerarg value="${compilerargs}"/>
    </javac>
  </target>

 <!-- get svn revision -->
  <target name="svn" depends="init">
    <exec executable="svn" output="${build.classes}/svn.info">
        <arg value="info"/>
        <arg value="-r"/>
        <arg value="HEAD"/>
    </exec>
  </target>

  <!-- Prepare build directories -->
  <target name="init">
    <mkdir dir="${build}"/>
    <mkdir dir="${build.classes}"/>
  </target>

  <target name="strip" if="strip">
    <move file="${build.applets}/${applet}.jar" tofile="${build.applets}/${applet}_orig.jar" />
<!--	<taskdef resource="/Users/hauert/Research/VirtualLabs/VirtualLabs/tools/proguard/ant/task.properties" classpath="tools/proguard/proguard.jar" /> -->
	<taskdef name="proguard" classname="proguard.ant.ProGuardTask" classpath="tools/proguard/proguard.jar" />
	<proguard>
		-injars ${build.applets}/${applet}_orig.jar
		-outjars ${build.applets}/${applet}.jar
		-libraryjars ${java.home}/../Classes/classes.jar(java/**,javax/**,org/xml/**)
		<!-- this is apple specific -->
		-libraryjars /System/Library/Java/Extensions/j3dcore.jar
		-libraryjars /System/Library/Java/Extensions/j3dutils.jar
		-libraryjars /System/Library/Java/Extensions/vecmath.jar
		-ignorewarnings
		-keep public class chh.virtuallabs.${main}Lab {
			public static void main(java.lang.String[]);
		}
		-keep class chh.virtuallabs.GenericLab
		-keep class * implements chh.virtuallabs.GenericLab
		<!-- the following is needed for some service registration -->
		-keep class org.freehep.graphicsio.raw.RawImageWriterSpi
		-keep class org.freehep.graphicsio.gif.GIFImageWriterSpi
		-keep class org.freehep.graphicsio.ppm.PPMImageWriterSpi
	</proguard>
  </target>

<!-- in earlier experiments with (an earlier version) proguard i had additional instructions:
		-libraryjars additions/lib/jdom-1.0.jar
		-libraryjars additions/lib/junit-3.8.2.jar
		-libraryjars additions/lib/openide-lookup-1.9-patched-1.0.jar
		-libraryjars additions/lib/freehep-export-2.1.1.jar
		-libraryjars additions/lib/freehep-swing-2.0.3.jar
note that these jars are not needed in the end and all references will be stripped.
maybe this also caused troubles with obfuscation.
instead, -ignorewarnings seems to do the trick. ugly but efficient.
-->
</project>

