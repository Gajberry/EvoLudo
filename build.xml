<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>

<!--
//
//  EvoLudo Project
//
//  Copyright 2002-2010 Christoph Hauert
//
//  This work is licensed under the Creative Commons Attribution-Noncommercial 2.5 Canada License. 
//  To view a copy of this license, visit http://creativecommons.org/licenses/by-nc/2.5/ca/ or send
//  a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.
//
//  According to the above license you may share, adapt and extend the project for your own purposes but
//  you may not use it for commercial purposes and you are required to attribute the author and the origin 
//  of the project as follows:
//
//  Hauert, Christoph (2010) EvoLudo Project, http://www.evoludo.org (svn: revision number)
//  or
//  Hauert, Christoph (2010) EvoLudo Project, http://www.evoludo.org (date of download)
//
//  with the date of the download or the svn revision number inserted as appropriate (the formatting may 
//  be changed to comply with publisher requirements)
//
//  -->

<!-- ant build file for EvoLudoLabs -->

<project name="EvoLudoLabs" default="web" basedir="." >

	<!-- Properties -->

	<property name="src" value="src"/>
	<property name="build" value="build"/>
	<property name="build.classes" value="${build}/classes"/>
	<property name="build.applets" value="${build}/applets"/>
	<property name="build.simulations" value="${build}/simulations"/>
	<property name="web" value="web"/>
	<property name="product" value="product"/>
	<property name="ant.files" value="ant"/>

	<property environment="env"/>

	<!-- Targets -->

	<!-- Prepare build directories -->
	<target name="init">
		<mkdir dir="${build}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.applets}"/>
		<mkdir dir="${build.simulations}"/>
		<mkdir dir="${product}"/>
		<condition property="compilerargs" value="-Xlint:all,-serial">
			<equals arg1="${env.DEBUG}" arg2="debug"/>
		</condition>
		<condition property="debug" value="on">
			<equals arg1="${env.DEBUG}" arg2="debug"/>
		</condition>
		<condition property="optimize" value="off">
			<equals arg1="${env.DEBUG}" arg2="debug"/>
		</condition>
		<condition property="nostrip">
			<equals arg1="${env.DEBUG}" arg2="debug"/>
		</condition>
		<condition property="listfiles" value="on">
			<equals arg1="${env.DEBUG}" arg2="debug"/>
		</condition>
	</target>

	<!-- Kill all the created directories -->
	<target name="clean">
		<delete dir="${build}"/>
		<delete dir="${product}"/>
	</target>

	<!-- Dialect -->
	<target name="Dialect">
		<antcall target="-capplet">
			<param name="applet" value="Dialect"/>
		</antcall>
	</target>

	<target name="simDialect">
		<antcall target="-csims">
			<param name="nosvg" value="true"/>
			<param name="core" value="Dialect"/>
			<param name="sim" value="simDialect"/>
		</antcall>
	</target>

	<target name="cleanDialect">
		<antcall target="-clean">
			<param name="applet" value="Dialect"/>
		</antcall>
	</target>

	<!-- Motility -->
	<target name="Motility">
		<antcall target="-dapplet">
			<param name="applet" value="Motility"/>
		</antcall>
	</target>

	<target name="scanMoti">
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="Motility"/>
			<param name="sim" value="scanMotility"/>
		</antcall>
	</target>

	<target name="cleanMotility">
		<antcall target="-clean">
			<param name="applet" value="Motility"/>
		</antcall>
	</target>

	<!-- Moran -->
	<target name="Moran">
		<antcall target="-dapplet">
			<param name="applet" value="Moran"/>
		</antcall>
	</target>
	
	<target name="simMoran">
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="Moran"/>
			<param name="sim" value="simMoran"/>
		</antcall>
	</target>
	
	<target name="cleanMoran">
		<antcall target="-clean">
			<param name="applet" value="Moran"/>
		</antcall>
	</target>

	<!-- NetGames -->
	<target name="NetGames">
		<antcall target="-dapplet">
			<param name="applet" value="NetGames"/>
			<param name="main" value="NetGames"/>
		</antcall>
	</target>

	<target name="cleanNetGames">
		<antcall target="-clean">
			<param name="applet" value="NetGames"/>
		</antcall>
	</target>

	<!-- 2x2 -->
	<target name="2x2">
		<antcall target="-dapplet">
			<param name="applet" value="2x2"/>
			<param name="main" value="TwoByTwo"/>
		</antcall>
	</target>

	<target name="sim2x2Fix">
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="TwoByTwo"/>
			<param name="sim" value="simTBTFix"/>
		</antcall>
	</target>

	<target name="sim2x2Matching">
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="TwoByTwo"/>
			<param name="sim" value="simTBTMatching"/>
		</antcall>
	</target>

<!-- this is a bit hackish - we need some classes from the interface to enable snapshots... -->
	<target name="sim2x2" depends="-dinterface">
		<antcall target="-dinterface">
			<param name="nosvg" value="true"/>
			<param name="core" value="TwoByTwo"/>
		</antcall>
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="TwoByTwo"/>
			<param name="sim" value="simTBT"/>
		</antcall>
	</target>

<!--	<target name="-dinterface" depends="init">
		<ant antfile="${ant.files}/core.xml" target="dinterface">
			<property name="build.classes" value="${build.simulations}/TwoByTwo"/>
		</ant>
	</target>-->
<!-- end hackish... -->

	<target name="clean2x2">
		<antcall target="-clean">
			<param name="applet" value="2x2"/>
		</antcall>
	</target>

    <!-- asymmetric 2x2 -->
    <target name="Asymmetric2x2">
        <antcall target="-dapplet">
            <param name="applet" value="Asymmetric2x2"/>
            <param name="main" value="AsymmetricTBT"/>
        </antcall>
    </target>

	<!-- 2x2 demes -->
	<target name="Demes2x2">
		<antcall target="-dapplet">
			<param name="main" value="DemesTBT"/>
			<param name="super" value="TwoByTwo"/>
			<param name="applet" value="Demes2x2"/>
		</antcall>
	</target>

	<target name="simDemes2x2">
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="DemesTBT"/>
			<param name="super" value="TwoByTwo"/>
			<param name="sim" value="simDemesTBT"/>
		</antcall>
	</target>

	<target name="cleanDemes2x2">
		<antcall target="-clean">
			<param name="applet" value="Demes2x2"/>
		</antcall>
	</target>

	<!-- public goods -->
	<target name="PGG">
		<antcall target="-dapplet">
			<param name="applet" value="PublicGoods"/>
		</antcall>
	</target>

	<target name="cleanPGG">
		<antcall target="-clean">
			<param name="applet" value="PublicGoods"/>
		</antcall>
	</target>

	<!-- voluntary public goods -->
	<target name="CDL">
		<antcall target="-dapplet">
			<param name="applet" value="CDL"/>
		</antcall>
	</target>

	<target name="cleanCDL">
		<antcall target="-clean">
			<param name="applet" value="CDL"/>
		</antcall>
	</target>

	<!-- voluntary public goods with punishment -->
	<target name="CDLP">
		<antcall target="-dapplet">
			<param name="applet" value="CDLP"/>
		</antcall>
	</target>

	<target name="simCDLP">
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="CDLP"/>
			<param name="sim" value="simCDLP"/>
		</antcall>
	</target>

	<target name="cleanCDLP">
		<antcall target="-clean">
			<param name="applet" value="CDLP"/>
		</antcall>
	</target>

	<!-- voluntary public goods with peer punishment & sanctioning -->
	<target name="CDLPQ">
		<antcall target="-dapplet">
			<param name="applet" value="CDLPQ"/>
		</antcall>
	</target>

<!-- this is a bit hackish - we need some classes from the interface to enable snapshots... -->
	<target name="simCDLPQ" depends="-dinterface">
		<antcall target="-dinterface">
			<param name="nosvg" value="true"/>
			<param name="core" value="CDLPQ"/>
		</antcall>
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="CDLPQ"/>
			<param name="sim" value="simCDLPQ"/>
		</antcall>
	</target>
<!-- end hackish... -->

<!--	<target name="simCDLPQ">
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="CDLPQ"/>
			<param name="sim" value="simCDLPQ"/>
		</antcall>
	</target> -->

	<target name="cleanCDLPQ">
		<antcall target="-clean">
			<param name="applet" value="CDLPQ"/>
		</antcall>
	</target>

    <!-- institution -->
    <target name="Institution">
        <antcall target="-dapplet">
            <param name="applet" value="Institution"/>
        </antcall>
    </target>

	<!-- synergy & discounting -->
	<target name="Discount">
		<antcall target="-dapplet">
			<param name="applet" value="Discount"/>
		</antcall>
	</target>

	<target name="cleanDiscount">
		<antcall target="-clean">
			<param name="applet" value="Discount"/>
		</antcall>
	</target>

	<!-- ecological public goods -->
	<target name="EcoPGG">
		<antcall target="-dapplet">
			<param name="applet" value="EcoPGG"/>
			<param name="main" value="EcoPublicGoods"/>
		</antcall>
	</target>

	<target name="cleanEcoPGG">
		<antcall target="-clean">
			<param name="applet" value="EcoPGG"/>
		</antcall>
	</target>

<!-- this is a bit hackish - we need some classes from the interface to enable snapshots... 
		<property name="core" value="EcoPublicGoods"/>

	<target name="simEcoPGG" depends="-dinterface">
-->
	<target name="simEcoPGG">
		<antcall target="-dinterface">
			<param name="nosvg" value="true"/>
			<param name="core" value="EcoPublicGoods"/>
		</antcall>
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="EcoPublicGoods"/>
			<param name="sim" value="simEcoPGG"/>
		</antcall>
	</target>

	<target name="-dinterface" depends="init">
		<ant antfile="${ant.files}/core.xml" target="dinterface">
			<property name="build.classes" value="${build.simulations}/${core}"/>
		</ant>
	</target>
<!-- end hackish... -->

	<!-- punishment & reputation -->
	<target name="Punishment">
		<antcall target="-dapplet">
			<param name="applet" value="Punishment"/>
		</antcall>
	</target>

	<target name="cleanPunishment">
		<antcall target="-clean">
			<param name="applet" value="Punishment"/>
		</antcall>
	</target>

	<!-- reward & reputation -->
	<target name="Reward">
		<antcall target="-dapplet">
			<param name="applet" value="Reward"/>
		</antcall>
	</target>

	<target name="simReward">
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="Reward"/>
			<param name="sim" value="simReward"/>
		</antcall>
	</target>

	<target name="cleanReward">
		<antcall target="-clean">
			<param name="applet" value="Reward"/>
		</antcall>
	</target>

	<!-- reward & punishment -->
	<target name="RePun">
		<antcall target="-dapplet">
			<param name="applet" value="RePun"/>
		</antcall>
	</target>

	<target name="simRePun">
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="RePun"/>
			<param name="sim" value="simRePun"/>
		</antcall>
	</target>

	<target name="cleanRePun">
		<antcall target="-clean">
			<param name="applet" value="RePun"/>
		</antcall>
	</target>

	<!-- rock, paper, scissors -->
	<target name="RSP">
<!-- <ant antfile="${ant.files}/core.xml" target="mtj">
	<property name="build.classes" value="${build.classes}/RSP"/>
</ant> -->
		<antcall target="-dapplet">
			<param name="applet" value="RSP"/>
		</antcall>
	</target>

	<target name="simRSP">
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="RSP"/>
			<param name="sim" value="simRSP"/>
		</antcall>
	</target>

	<target name="cleanRSP">
		<antcall target="-clean">
			<param name="applet" value="RSP"/>
		</antcall>
	</target>

	<!-- n-traits -->
	<target name="Traits">
<!--		<ant antfile="${ant.files}/core.xml" target="mtj">
			<property name="build.classes" value="${build.classes}/Traits"/>
		</ant>-->
		<antcall target="-dappletmtj">
			<param name="applet" value="Traits"/>
		</antcall>
	</target>

	<target name="simTraits">
<!--		<ant antfile="${ant.files}/core.xml" target="mtj">
			<property name="build.classes" value="${build.simulations}/Traits"/>
		</ant>-->
		<antcall target="-dsims">
			<param name="nosvg" value="true"/>
			<param name="core" value="Traits"/>
			<param name="sim" value="simTraits"/>
		</antcall>
	</target>
	
	<target name="cleanTraits">
		<antcall target="-clean">
			<param name="applet" value="Traits"/>
		</antcall>
	</target>
	
	<!-- continuous 2x2 -->
	<target name="C2x2">
		<antcall target="-capplet">
			<param name="applet" value="C2x2"/>
			<param name="main" value="CTwoByTwo"/>
		</antcall>
	</target>

	<target name="cleanC2x2">
		<antcall target="-clean">
			<param name="applet" value="C2x2"/>
		</antcall>
	</target>

	<!-- continuous snowdrift -->
	<target name="CSD">
		<antcall target="-capplet">
			<param name="applet" value="CSD"/>
		</antcall>
	</target>

	<target name="cleanCSD">
		<antcall target="-clean">
			<param name="applet" value="CSD"/>
		</antcall>
	</target>

	<!-- continuous labour -->
	<target name="CLabour">
		<antcall target="-capplet">
			<param name="applet" value="CLabour"/>
		</antcall>
	</target>

	<target name="cleanCLabour">
		<antcall target="-clean">
			<param name="applet" value="CLabour"/>
		</antcall>
	</target>

	<!-- build web tutorials -->
	<target name="web">
		<antcall target="-web">
			<param name="nosvg" value="true"/>
			<param name="noparser" value="true"/>
			<param name="strip" value="true"/>
		</antcall>
	</target>

	<target name="-web" depends="web-Intro,web-Moran,web-2x2,web-Snowdrift,web-PGG,web-CDL,web-CDLP,web-Discount,web-EcoPGG,web-RePun,web-CSD,web-general">
		<copy todir="${product}/images">
			<fileset dir="${web}/images"/>
		</copy>
		<copy todir="${product}" file="${web}/favicon.ico"/>
		<copy todir="${product}" file="${web}/index.html"/>
	</target>

	<target name="web-general" depends="web-style">
		<copy todir="${product}/General">
			<fileset dir="${web}/General"/>
		</copy>
	</target>

	<target name="web-style">
		<copy todir="${product}/styles">
			<fileset dir="${web}/styles"/>
		</copy>
	</target>

	<target name="cleanweb" depends="clean">
		<delete dir="${product}/styles"/>
		<delete dir="${product}/General"/>
		<delete file="${product}/favicon.ico"/>
		<delete file="${product}/index.html"/>
	</target>

	<target name="web-Intro" depends="RSP,2x2,web-style">
		<copy todir="${product}/Introduction">
			<fileset dir="${web}/Introduction"/>
			<fileset file="${build.applets}/RSP.jar"/>
			<fileset file="${build.applets}/2x2.jar"/>
		</copy>
	</target>

	<target name="web-Moran" depends="Moran,2x2,web-style">
		<copy todir="${product}/Moran">
			<fileset dir="${web}/Moran"/>
			<fileset file="${build.applets}/Moran.jar"/>
			<fileset file="${build.applets}/2x2.jar"/>
		</copy>
	</target>

	<target name="web-2x2" depends="2x2,web-style">
		<copy todir="${product}/TwoByTwo">
			<fileset dir="${web}/TwoByTwo"/>
			<fileset file="${build.applets}/2x2.jar"/>
		</copy>
	</target>

	<target name="web-Snowdrift" depends="2x2,C2x2,web-style">
		<copy todir="${product}/Snowdrift">
			<fileset dir="${web}/Snowdrift"/>
			<fileset file="${build.applets}/2x2.jar"/>
			<fileset file="${build.applets}/C2x2.jar"/>
		</copy>
	</target>

	<target name="web-PGG" depends="PGG,web-style">
		<copy todir="${product}/PublicGoods">
			<fileset dir="${web}/PublicGoods"/>
			<fileset file="${build.applets}/PublicGoods.jar"/>
		</copy>
	</target>

	<target name="web-CDL" depends="CDL,web-style">
		<copy todir="${product}/Volunteering">
			<fileset dir="${web}/Volunteering"/>
			<fileset file="${build.applets}/CDL.jar"/>
		</copy>
	</target>

	<target name="web-CDLP" depends="CDLP,web-style">
		<copy todir="${product}/VolPun">
			<fileset dir="${web}/VolPun"/>
			<fileset file="${build.applets}/CDLP.jar"/>
		</copy>
	</target>

	<target name="web-Discount" depends="Discount,web-style">
		<copy todir="${product}/Discount">
			<fileset dir="${web}/Discount"/>
			<fileset file="${build.applets}/Discount.jar"/>
		</copy>
	</target>

	<target name="web-EcoPGG" depends="EcoPGG,web-style">
		<copy todir="${product}/Ecology">
			<fileset dir="${web}/Ecology"/>
			<fileset file="${build.applets}/EcoPGG.jar"/>
		</copy>
	</target>

	<target name="web-RePun" depends="Reward,Punishment,web-style">
		<copy todir="${product}/RewardAndPunishment">
			<fileset dir="${web}/RewardAndPunishment"/>
			<fileset file="${build.applets}/Reward.jar"/>
			<fileset file="${build.applets}/Punishment.jar"/>
		</copy>
	</target>

	<target name="web-CSD" depends="CSD,web-style">
		<copy todir="${product}/Branching">
			<fileset dir="${web}/Branching"/>
			<fileset file="${build.applets}/CSD.jar"/>
		</copy>
	</target>


	<!-- helper targets - do not call directly -->
	<target name="-clean">
		<delete dir="${build.classes}/${applet}"/>
		<delete file="${build.applets}/${applet}.jar"/>
	</target>

	<target name="-dapplet" depends="init">
		<ant antfile="${ant.files}/core.xml" target="dapplet">
			<property name="build.classes" value="${build.classes}/${applet}"/>
		</ant>
	</target>
	
	<target name="-dappletmtj">
		<ant antfile="${ant.files}/core.xml" target="mtj">
			<property name="build.classes" value="${build.classes}/${applet}"/>
		</ant>
		<!-- first needs to build mtj -->
		<antcall target="-dapplet"/>
	</target>
	
	<target name="-capplet" depends="init">
		<ant antfile="${ant.files}/core.xml" target="capplet">
			<property name="build.classes" value="${build.classes}/${applet}"/>
		</ant>
	</target>

	<target name="-dsims" depends="init">
		<ant antfile="${ant.files}/core.xml" target="dsims">
			<property name="build.classes" value="${build.simulations}/${core}"/>
		</ant>
	</target>

	<target name="-csims" depends="init">
		<ant antfile="${ant.files}/core.xml" target="csims">
			<property name="build.classes" value="${build.simulations}/${core}"/>
		</ant>
	</target>

	<!-- GWT compilation targets -->
	<!-- Arguments to gwtc and devmode targets -->
	<property name="gwt.args" value="" />
	
	<!-- Configure path to GWT SDK -->
<!--	<property name="gwt.sdk" location="/Users/hauert/Research/Eclipse/Google/releases/gwt-2.8.2.XHTML" />-->


<!--	<path id="project.class.path">-->
<!--		<pathelement location="war/WEB-INF/classes"/>-->
<!--		<pathelement location="${gwt.sdk}/gwt-user.jar"/>-->
<!--		<pathelement location="${gwt.sdk}/gwt-dev.jar"/>-->
<!--		<pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>-->
<!--		<pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>-->
<!--		<fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>-->
		<!-- Add any additional non-server libs (such as JUnit) here -->
<!--	</path>-->

	<target name="libs" depends="gwt-init" description="Copy libs to WEB-INF/lib">
		<mkdir dir="war/WEB-INF/lib" />
		<copy todir="war/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet.jar" />
		<copy todir="war/WEB-INF/lib" file="${gwt.sdk}/gwt-servlet-deps.jar" />
		<!-- Add any additional server libs that need to be copied -->
	</target>
	
	<target name="javac" depends="libs" description="Compile java source to bytecode">
		<mkdir dir="war/WEB-INF/classes"/>
		<javac srcdir="src" includes="**" encoding="utf-8"
			destdir="war/WEB-INF/classes"
			source="1.7" target="1.7" nowarn="true"
			debug="true" debuglevel="lines,vars,source">
			<classpath refid="project.class.path"/>
		</javac>
		<copy todir="war/WEB-INF/classes">
			<fileset dir="src" excludes="**/*.java"/>
		</copy>
	</target>
	
	<target name="gwtc" depends="javac" description="GWT compile to JavaScript (production mode)">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler" maxmemory="512m">
			<classpath>
				<pathelement location="src"/>
				<path refid="project.class.path"/>
			</classpath>
			<arg line="-war"/>
			<arg value="war"/>
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
			<arg line="${gwt.args}"/>
			<arg value="org.evoludo.EvoLudoWeb"/>
		</java>
	</target>
	
	<target name="devmode" depends="javac" description="Run development mode (pass -Dgwt.args=-nosuperDevMode to fallback to classic DevMode)">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode" maxmemory="1g">
			<classpath>
				<pathelement location="src"/>
				<path refid="project.class.path"/>
				<pathelement location="${gwt.sdk}/gwt-codeserver.jar"/>
			</classpath>
			<arg value="-startupUrl"/>
			<arg value="EvoLudoWeb.html"/>
			<arg line="-war"/>
			<arg value="war"/>
			<!-- Additional arguments like -style PRETTY, -logLevel DEBUG or -nosuperDevMode -->
			<arg line="${gwt.args}"/>
			<arg value="org.evoludo.EvoLudoWeb"/>
			<arg value="org.evoludo.EvoLudoWeb"/>
		</java>
	</target>
	
	<target name="javac.tests" depends="javac" description="Compiles test code">
		<javac srcdir="test" includes="**" encoding="utf-8"
			source="1.7" target="1.7" nowarn="true"
			destdir="war/WEB-INF/classes"
			debug="true" debuglevel="lines,vars,source">
			<classpath location="../Google/tools/lib/junit/junit-4.8.2.jar"/>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="test.dev" depends="javac.tests" description="Run development mode tests">
		<mkdir dir="reports/htmlunit.dev" />
		<junit fork="yes" printsummary="yes" haltonfailure="yes" maxmemory="256m">
			<sysproperty key="gwt.args" value="-devMode -logLevel WARN -war www-test" />
			<sysproperty key="java.awt.headless" value="true" />
			<classpath>
				<pathelement location="src" />
				<pathelement location="test" />
				<path refid="project.class.path" />
				<pathelement location="/Users/hauert/Research/Eclipse/Google/releases/gwt-2.8.2.XHTML/validation-api-1.0.0.GA.jar" />
				<pathelement location="/Users/hauert/Research/Eclipse/Google/releases/gwt-2.8.2.XHTML/validation-api-1.0.0.GA-sources.jar" />
				<pathelement location="../Google/tools/lib/junit/junit-4.8.2.jar" />
			</classpath>
			<batchtest todir="reports/htmlunit.dev" >
				<fileset dir="test" >
					<include name="**/*Suite.java" />
				</fileset>
			</batchtest>
			<formatter type="plain" />
			<formatter type="xml" />
		</junit>
	</target>
	
	<target name="test.prod" depends="javac.tests" description="Run production mode tests">
		<mkdir dir="reports/htmlunit.prod" />
		<junit fork="yes" printsummary="yes" haltonfailure="yes" maxmemory="256m">
			<sysproperty key="gwt.args" value="-logLevel WARN -war www-test" />
			<sysproperty key="java.awt.headless" value="true" />
			<classpath>
				<pathelement location="src" />
				<pathelement location="test" />
				<path refid="project.class.path" />
				<pathelement location="/Users/hauert/Research/Eclipse/Google/releases/gwt-2.8.2.XHTML/validation-api-1.0.0.GA.jar" />
				<pathelement location="/Users/hauert/Research/Eclipse/Google/releases/gwt-2.8.2.XHTML/validation-api-1.0.0.GA-sources.jar" />
				<pathelement location="../Google/tools/lib/junit/junit-4.8.2.jar" />
			</classpath>
			<batchtest todir="reports/htmlunit.prod" >
				<fileset dir="test" >
					<include name="**/*Suite.java" />
				</fileset>
			</batchtest>
			<formatter type="plain" />
			<formatter type="xml" />
		</junit>
	</target>
	
	<target name="gwt-test" description="Run development and production mode tests">
		<antcall target="test.dev" />
		<antcall target="test.prod" />
	</target>
	
	<target name="gwt-init" depends="platform" description="init GWT">
		<property file="${ant.files}/${os.family}.properties"/>
		<path id="project.class.path">
			<pathelement location="war/WEB-INF/classes"/>
			<pathelement location="${gwt.sdk}/gwt-user.jar"/>
			<pathelement location="${gwt.sdk}/gwt-dev.jar"/>
			<pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
			<pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
			<fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
			<!-- Add any additional non-server libs (such as JUnit) here -->
			<pathelement location="lib/parallax-1.6.jar"/>
		</path>
	</target>
		
	<!-- copied from ant/core.xml -->
	<target name="platform">
		<condition property="os.family" value="windows">
			<os family="windows"/>
		</condition>
		<condition property="os.family" value="unix">
			<and>
				<os family="unix"/>
				<not>
					<os family="mac"/>
				</not>
			</and>
		</condition>
		<condition property="os.family" value="macosx">
			<and>
				<os family="unix"/>
				<os family="mac"/>
			</and>
		</condition>
		<condition property="os.family" value="default">
			<not>
				<isset property="os.family"/>
			</not>
		</condition>
	</target>

	<target name="gwt-build" depends="gwtc" description="Build this project"/>
	
	<target name="gwt-war" depends="gwt-build" description="Create a war file">
		<zip destfile="EvoLudoWeb.war" basedir="war"/>
	</target>
	
	<target name="gwt-clean" description="Cleans this project">
		<delete dir="war/WEB-INF/classes" failonerror="false" />
		<delete dir="war/evoludoweb" failonerror="false" />
	</target>
</project>

